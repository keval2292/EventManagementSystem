@page "/eventdetail/{EventEncryptedId}"
@inject IEventCategoryRepository _EventCategoryRepository
@inject IPaymentRepository _PaymentRepository
@inject IEventRepository _EventRepository
@inject IStaffRepository _StaffRepository
@inject IEventStaffWorkRepository _EventStaffWorkRepository
@layout EmptyLayout
@inject IJSRuntime JS
@if (invalidURL)
{
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudAlert Severity="Severity.Error">
            <MudText Typo="Typo.h5">The requested URL was not found on this server.</MudText>
        </MudAlert>
    </MudPaper>
}
else
{
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">Event Details</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudDivider />
                    <MudCardContent>
                        <MudText>Event Name : @EventModel.EventName </MudText>
                        <MudText>Organizor Name : @EventModel.OrganizerName</MudText>
                        <MudText>Organizor Contact : @EventModel.OrganizerContact</MudText>
                        <MudText>Event Description : @EventModel.Description</MudText>
                        <MudText>Event Timeing : @EventModel.SlotType</MudText>
                        <MudText>Event FromDate : @EventModel.FromDate</MudText>
                        @if (EventModel.SlotType == "MultipleDay")
                        {
                            <MudText>Event ToDate : @EventModel.Todate</MudText>
                        }
                        <MudText>Event Venue : @EventModel.EventVenue</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard Class="pa-4 rounded-lg" Style="height: 100%" Elevation="10">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h4">Event Service:</MudText>
                                </CardHeaderContent>

                            </MudCardHeader>
                            <MudDivider />
                            <MudCardContent>
                                <MudText>category :@EventCategoryName.CategoryName</MudText>
                                <MudText>
                                    Service:
                                    @if (EventModel.SelectedService != null) { selectedServiceList = EventModel.SelectedService.Split(',').ToList(); }
                                    @foreach (var service in selectedServiceList)
                                    {<MudChip>@service</MudChip>}
                                </MudText>
                            </MudCardContent>
                        </MudCard>


                    </MudItem>
                    <MudItem xs="12">
                        <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h4">
                                        Event payment:
                                        @if (PaymentList is not null)
                                        {
                                            @ValidCurrency(PaymentList.TotalAmount)
                                        }
                                    </MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    @if (PaymentList is not null)
                                    {
                                        <MudIconButton @onclick="@(()=>DownloadFile(PaymentList,"demo.pdf"))" Color="Color.Primary" Icon="@Icons.Material.Filled.Download" Size="Size.Large"></MudIconButton>
                                    }
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudDivider />
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem md="2">Mode</MudItem>
                                    <MudItem md="2">Received AMount</MudItem>
                                    <MudItem md="2">Remaining AMount</MudItem>
                                    <MudItem md="3">TransactionId</MudItem>
                                    <MudItem md="3">Date</MudItem>
                                </MudGrid>

                                <MudGrid>
                                    @if (PaymentList is not null)
                                    {
                                        <MudItem md="2">@PaymentList.PaymentMode</MudItem>
                                        <MudItem md="2">@ValidCurrency(@PaymentList.ReceivedAmount)</MudItem>
                                        <MudItem md="2">@ValidCurrency(@PaymentList.RemainingAmount)</MudItem>
                                        <MudItem md="3">@PaymentList.Transactionid</MudItem>
                                        <MudItem md="3">@PaymentList.CreatedOn.ToLongDateString()</MudItem>
                                    }
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">Event Staff:</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudDivider />
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="4">Service</MudItem>
                            <MudItem md="4">Staff Name</MudItem>
                            <MudItem md="4">Status</MudItem>
                        </MudGrid>
                        @foreach (var OperatorWork in EventStaffWorklist)
                        {
                            staffId = OperatorWork.StaffId;
                            <MudGrid>
                                <MudItem md="4">@OperatorWork.Service</MudItem>
                                @foreach (var staff in Getstaff())
                                {
                                    <MudItem md="4">@staff.User.UserName</MudItem>
                                }
                                <MudItem md="4">@OperatorWork.Status</MudItem>
                            </MudGrid>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter]
    public string EventEncryptedId { get; set; }
    private string EventId { get; set; }
    private Event EventModel = new();
    private EventCategory EventCategoryName = new();
    List<String> selectedServiceList = new List<string>();
    private Payment PaymentList = new();
    private List<EventStaffWork> EventStaffWorklist = new();
    private long staffId { get; set; }
    private List<Staff> StaffList = new();
    private bool invalidURL;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           
            invalidURL = false;
            //EventId = StringCipher.Decode(EventEncryptedId);
            long evId = 0;
            EventId = string.Empty;
            if (long.TryParse(StringCipher.Decode(EventEncryptedId), out evId) && evId > 0)
            {
                EventId = evId.ToString();
                GetEvent();
                GetAllPaymentsByEventId(EventId);
                Getstaff();
                GetEventStaffWork();
                if (EventModel is not null && EventModel.CategoryId > 0)
                {
                    EventCategoryName = _EventCategoryRepository.GetById(EventModel.CategoryId);
                }
            }
            else
            {
                invalidURL = true;
            }
            StateHasChanged();
        }

        return base.OnAfterRenderAsync(firstRender);
    }
   
    Payment GetAllPaymentsByEventId(string eventId)
    {
        PaymentList = _PaymentRepository.GetByEventId(Convert.ToInt64(eventId));
        return PaymentList;
    }
    string ValidCurrency(string value) => string.Format("₹ {0:#.00}", Convert.ToDecimal(value));
    private List<EventStaffWork> GetEventStaffWork()
    {
        EventStaffWorklist = _EventStaffWorkRepository.GetListFromEvent(Convert.ToInt64(EventId));
        return EventStaffWorklist;
    }
    private Event GetEvent()
    {
        EventModel = _EventRepository.GetById(Convert.ToInt64(EventId));
        return EventModel;
    }
    private List<Staff> Getstaff()
    {
        StaffList = _StaffRepository.GetById(staffId);
        return StaffList;
    }
    private void DownloadFile(Payment payments, string filename)
    {
        var pdf = new PDFGenerator();
        pdf.Downloadpdf(payments, JS, filename);
    }

}
