@page "/EditEvent/{EventId}"
@attribute [Authorize(Roles = "Admin, Operator")]
@inject IJSRuntime JS

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudItem Class="d-flex justify-content-between">
                            <MudText Typo="Typo.h4">Event Details</MudText>
                        </MudItem>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <AuthorizeView Roles="Admin" Context="innerContext">
                            <MudIconButton OnClick="@(()=> EditEventDetails(EventModel))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>
                        </AuthorizeView>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudDivider />
                <MudCardContent>
                    <MudText Typo="Typo.h6"  Class="d-flex justify-end">
                        Last updated on :
                        <MudIcon Icon="@Icons.Material.Filled.AccessAlarms" Color="Color.Primary" />
                        @if (EventModel.UpdatedOn.HasValue)
                        {
                            @EventModel.UpdatedOn.Value.ToLongDateString()
                        }
                        else
                        {
                            @EventModel.CreatedOn.ToLongDateString()
                        }
                    </MudText>
                    <MudGrid>
                        <MudItem sm="6" md="6" lg="6">
                            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Event" Color="Color.Primary" /> Event :@EventModel.EventName</MudText>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Primary" /> Organizer Name : @EventModel.OrganizerName
                                @if (@EventModel is not null && !string.IsNullOrEmpty(@EventModel.OrganizerContact))
                                {
                                    @("( +91"  + @EventModel.OrganizerContact + ")")
                                }
                            </MudText>

                            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Description" Color="Color.Primary" /> Description :  @EventModel.Description</MudText>

                        </MudItem>
                        <MudItem sm="6" md="6" lg="6">
                            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.LocationOn" Color="Color.Primary" /> Venue : @EventModel.EventVenue</MudText>
                            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.AccessTime" Color="Color.Primary" /> Event days: @EventModel.SlotType</MudText>
                            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Primary" /> Start Date :@EventModel.FromDate</MudText>
                            @if (EventModel.SlotType == "MultipleDay")
                            {
                                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Primary" /> Event ToDate : @EventModel.Todate</MudText>
                            }
                        </MudItem>
                    </MudGrid>

                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudCard Class="pa-4 rounded-lg" Style="height: 100%" Elevation="10">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h4">Event Service:</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <AuthorizeView Roles="Admin" Context="innerContext">
                                    <MudIconButton OnClick="@(() => EditEventSelectService(EventModel))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>
                                </AuthorizeView>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudDivider />
                        <MudCardContent>
                            <MudText Typo="Typo.h6">category :@EventCategoryName.CategoryName</MudText>
                            <MudText Typo="Typo.h6">Service:
                                @if (EventModel.SelectedService != null) { selectedServiceList = EventModel.SelectedService.Split(',').ToList(); }
                                @foreach (var service in selectedServiceList)
                                {
                                <MudChip Color="Color.Info">@service</MudChip>                                }
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h4">
                                    Event payment:
                    @if (PaymentList is not null && PaymentList.Any())
                                    {
                        @ValidCurrency(PaymentList.FirstOrDefault().TotalAmount)
                                    }
                                </MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <AuthorizeView Roles="Admin" Context="innerContext">
                                    @if (PaymentList.Any())
                                    {
                                        <MudIconButton @onclick="@(() => OpenDialog(PaymentModel))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>
                                        @*<MudIconButton @onclick="@(() => CreatePdf())" Icon="@Icons.Material.Filled.Download" Color="Color.Primary" aria-label="github"></MudIconButton>*@
                                    }
                                    else
                                    {
                                        <MudIconButton @onclick="@(() => Addpayment())" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>
                                    }
                                </AuthorizeView>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudDivider />
                        <MudCardContent>
                            <MudGrid>
                                <MudItem md="2">Mode</MudItem>
                                <MudItem md="2">Received Amount</MudItem>
                                <MudItem md="2">Remaining Amount</MudItem>
                                <MudItem md="3">Transaction Id</MudItem>
                                <MudItem md="3">Date</MudItem>
                            </MudGrid>
                            @foreach (var payment in PaymentList)
                            {
                                <MudGrid>
                                    <MudItem md="2">@payment.PaymentMode</MudItem>
                                    <MudItem md="2">@ValidCurrency(@payment.ReceivedAmount)</MudItem>
                                    <MudItem md="2">@ValidCurrency(@payment.RemainingAmount)</MudItem>
                                    <MudItem md="3">@payment.Transactionid</MudItem>
                                    <MudItem md="3">@payment.CreatedOn.ToLongDateString()</MudItem>
                                </MudGrid>
                            }

                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudCard Elevation="10" Style="height: 100%" Class="pa-4 rounded-lg">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4">Event Staff:</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @*<MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="github"></MudIconButton>*@
                    </CardHeaderActions>
                </MudCardHeader>
                <MudDivider />
                <MudCardContent>
                    <MudGrid>
                        <MudItem md="4"><MudText Typo="Typo.h6">Service</MudText></MudItem>
                        <MudItem md="4"><MudText Typo="Typo.h6">Staff Name</MudText></MudItem>
                        <MudItem md="4"><MudText Typo="Typo.h6">Status</MudText></MudItem>
                    </MudGrid>
                    @foreach (var OperatorWork in GetEventStaffWork())
                    {
                        <MudGrid>
                            <MudItem md="4">@OperatorWork.Service</MudItem>
                            @foreach (var staff in Getstaff(OperatorWork.StaffId))
                            {
                                <MudItem md="4">@staff.User.UserName</MudItem>
                            }
                            <MudItem md="4">@OperatorWork.Status</MudItem>
                        </MudGrid>                          
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>
