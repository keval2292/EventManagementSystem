@using System.Linq.Expressions
@using System

@if (!string.IsNullOrEmpty(Label) && string.IsNullOrEmpty(PlaceHolder))
{
    <CustomControlLabel>@Label</CustomControlLabel>
}
@if (string.IsNullOrEmpty(PlaceHolder))
{
    @if (!string.IsNullOrEmpty(PrefixMudIconName))
    {
        <MudTextField Variant="@Variant" data-tc-auto="@TestDataAttribute" For="@For" Class="@Class" T="string" Value="@Value" Style="@Style" Immediate="@Immediate"
              ValueChanged="@ValueChangeHandler" TextChanged="ValueChangeHandler"
              Adornment="Adornment.Start" AdornmentIcon="@PrefixMudIconName"></MudTextField>
    }
    else
    {
        if (InputType == InputType.Password)
        {
            <MudTextField Style="@Style" data-tc-auto="@TestDataAttribute" Variant="@Variant" InputType="@InputType" For="@For" Immediate="@Immediate" Class="@Class" T="string" Value="@Value" ValueChanged="@(ValueChangeHandler)"></MudTextField>
        }
        else
        {
            <MudTextField Style="@Style" data-tc-auto="@TestDataAttribute" Variant="@Variant" For="@For" Disabled="@Disabled" Immediate="@Immediate" Class="@Class" T="string" Value="@Value" ValueChanged="@(ValueChangeHandler)"></MudTextField>
        }
    }
}
else
{
    @if (!string.IsNullOrEmpty(PrefixMudIconName))
    {
        <MudTextField Style="@Style" data-tc-auto="@TestDataAttribute" Variant="@Variant" For="@For" Class="@Class" T="string" Value="@Value"
              ValueChanged="@ValueChangeHandler" TextChanged="ValueChangeHandler" Label="@PlaceHolder"
              Adornment="Adornment.Start" AdornmentIcon="@PrefixMudIconName"></MudTextField>
    }
    else
    {
        if (InputType == InputType.Password)
        {
            <MudTextField Style="@Style" data-tc-auto="@TestDataAttribute" Variant="@Variant" For="@For" InputType="@InputType" Label="@PlaceHolder" Immediate="@Immediate" Class="@Class" T="string" Value="@Value" ValueChanged="@(ValueChangeHandler)"></MudTextField>
        }
        else
        {
            <MudTextField Style="@Style" data-tc-auto="@TestDataAttribute" Variant="@Variant" For="@For" Label="@PlaceHolder" Disabled="@Disabled" Immediate="@Immediate" Class="@Class" T="string" Value="@Value" ValueChanged="@(ValueChangeHandler)"></MudTextField>
        }

    }
}

@code {
    /// <summary>
    /// Gets or sets the event callback when the values is changed.
    /// </summary>
    /// <value>Event callback.</value>
    [Parameter]
    public EventCallback<string> ValueChangedCallBack { get; set; }

    [Parameter]
    public Variant Variant { get; set; }

    [Parameter]
    public Expression<System.Func<string>> For { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string TestDataAttribute { get; set; } = "-";

    [Parameter]
    public string PlaceHolder { get; set; }

    [Parameter]
    public string PrefixMudIconName { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool Immediate { get; set; } = false;

    [Parameter]
    public InputType InputType { get; set; }

    private void ValueChangeHandler(object value)
    {
        if (value != null && !string.IsNullOrWhiteSpace(Convert.ToString(value)))
        {
            string _value = Convert.ToString(value);
            Value = _value;
            ValueChangedCallBack.InvokeAsync(_value);
            return;
        }
        else
        {
            Value = string.Empty;
            ValueChangedCallBack.InvokeAsync(string.Empty);
            return;
        }
    }
}